# .github/workflows/compile-native.yml

name: Compile Native iOS Project (Turbo Modules)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - 'native-monGARS/ios/**'
      - 'native-monGARS/modules/**'
      - 'native-monGARS/package.json'
      - 'native-monGARS/app.json'

jobs:
  compile-ios:
    runs-on: macos-14
    
    defaults:
      run:
        working-directory: ./native-monGARS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
          cache-dependency-path: native-monGARS/package-lock.json

      # *** NEW ROBUST INSTALLATION STRATEGY ***
      - name: Clean Install Dependencies
        run: |
          echo "Clearing npm cache and removing existing node_modules/lockfile..."
          npm cache clean --force
          rm -rf node_modules package-lock.json

          echo "Applying patches before installing..."
          # patch-package needs to run before install to prepare the ground
          npx patch-package
          
          echo "Running npm install. This may take a while..."
          # Using --legacy-peer-deps is often more successful than --force for complex projects
          npm install --legacy-peer-deps

      - name: Verify Critical Dependencies
        run: |
          echo "Verifying that 'react-native' is installed..."
          if [ ! -f "node_modules/react-native/package.json" ]; then
            echo "::error::'react-native' package was not found after install. Dependency resolution failed."
            exit 1
          fi
          echo "✅ Critical dependencies are present."

      - name: Generate native iOS project
        run: npx expo prebuild --platform ios --no-install --clean

      - name: Set up Ruby and Bundler for CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ./native-monGARS/ios

      - name: Install CocoaPods
        run: bundle install
        working-directory: ./native-monGARS/ios

      - name: Run Pod Install
        run: pod install
        working-directory: ./native-monGARS/ios
      
      - name: Verify Pod Installation
        run: |
          echo "Verifying Pods directory exists..."
          if [ ! -d "ios/Pods" ]; then
            echo "::error::'pod install' failed. Pods directory not found."
            exit 1
          fi
          echo "✅ Pods installed successfully."

      - name: Compile Xcode Project
        run: |
          xcodebuild build -workspace ios/nativemongars.xcworkspace \
            -scheme nativemongars \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro'