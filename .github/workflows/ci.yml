name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: "20"
  BUN_VERSION: "1.1.0"

jobs:
  # Code Quality and Testing
  quality-check:
    name: Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run TypeScript check
        run: bun run tsc --noEmit

      - name: Run ESLint
        run: bun run lint

      - name: Run Prettier check
        run: bun run prettier --check .

      - name: Run tests
        run: bun test

      - name: Generate test coverage
        run: bun test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun audit

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build Android
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [quality-check, security-audit]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Create env file
        run: |
          echo "EXPO_PUBLIC_VIBECODE_OPENAI_API_KEY=${{ secrets.EXPO_PUBLIC_VIBECODE_OPENAI_API_KEY }}" >> .env
          echo "EXPO_PUBLIC_VIBECODE_ANTHROPIC_API_KEY=${{ secrets.EXPO_PUBLIC_VIBECODE_ANTHROPIC_API_KEY }}" >> .env
          echo "EXPO_PUBLIC_VIBECODE_GROK_API_KEY=${{ secrets.EXPO_PUBLIC_VIBECODE_GROK_API_KEY }}" >> .env

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Pre-build Android
        run: bun run expo prebuild --platform android --clean

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleRelease

      - name: Build Android AAB
        run: |
          cd android
          ./gradlew bundleRelease

      - name: Sign Android APK
        uses: r0adkll/sign-android-release@v1
        id: sign_apk
        with:
          releaseDirectory: android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Sign Android AAB
        uses: r0adkll/sign-android-release@v1
        id: sign_aab
        with:
          releaseDirectory: android/app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-release
          path: |
            ${{ steps.sign_apk.outputs.signedReleaseFile }}
            ${{ steps.sign_aab.outputs.signedReleaseFile }}

  # Build iOS
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: [quality-check, security-audit]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Cache Cocoapods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Create env file
        run: |
          echo "EXPO_PUBLIC_VIBECODE_OPENAI_API_KEY=${{ secrets.EXPO_PUBLIC_VIBECODE_OPENAI_API_KEY }}" >> .env
          echo "EXPO_PUBLIC_VIBECODE_ANTHROPIC_API_KEY=${{ secrets.EXPO_PUBLIC_VIBECODE_ANTHROPIC_API_KEY }}" >> .env
          echo "EXPO_PUBLIC_VIBECODE_GROK_API_KEY=${{ secrets.EXPO_PUBLIC_VIBECODE_GROK_API_KEY }}" >> .env

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Pre-build iOS
        run: bun run expo prebuild --platform ios --clean

      - name: Install iOS dependencies
        run: |
          cd ios
          pod install

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Import certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}

      - name: Download provisioning profiles
        uses: apple-actions/download-provisioning-profiles@v2
        with:
          bundle-id: com.vibecode.phi4reasoning
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

      - name: Build iOS Archive
        run: |
          cd ios
          xcodebuild -workspace Phi4Reasoning.xcworkspace \
            -scheme Phi4Reasoning \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Phi4Reasoning.xcarchive \
            archive

      - name: Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/Phi4Reasoning.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build/

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-release
          path: ios/build/*.ipa

  # Deploy to Expo
  deploy-expo:
    name: Deploy to Expo
    runs-on: ubuntu-latest
    needs: [quality-check, security-audit]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Publish to Expo
        run: bun run expo publish --non-interactive --max-workers 1

  # Deploy Android to Play Store
  deploy-android:
    name: Deploy Android to Play Store
    runs-on: ubuntu-latest
    needs: [build-android]
    if: github.event_name == 'release'

    steps:
      - name: Download Android artifacts
        uses: actions/download-artifact@v3
        with:
          name: android-release

      - name: Upload to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.vibecode.phi4reasoning
          releaseFiles: "*.aab"
          track: production
          status: completed

  # Deploy iOS to App Store
  deploy-ios:
    name: Deploy iOS to App Store
    runs-on: macos-latest
    needs: [build-ios]
    if: github.event_name == 'release'

    steps:
      - name: Download iOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: ios-release

      - name: Upload to App Store Connect
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: "*.ipa"
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-android, deploy-ios]
    if: always()

    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
